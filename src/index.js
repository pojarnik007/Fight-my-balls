import './style.css'
import p5 from 'p5'
import { preload, setup, draw, setPlayers } from './game.js'
import { initPlayers } from './game.js'
import { resetState, state } from './state.js'

const player1Stat = document.getElementById('player1Stat')
const player2Stat = document.getElementById('player2Stat')
const endButtonsDiv = document.getElementById('end-buttons')
const menuBtn = document.getElementById('menu-btn')

let selectedPlayer1 = 'Thief'
let selectedPlayer2 = 'Thief'
const characters = [
  'Thief',
  'Knight',
  'Mage',
  'Archer',
  'Spearman',
  'Samurai',
  'Viking',
  'Shielder',
  'Fighter',
  'Ninja',
  'Piper',
]
let pInstance


// ----------------------------------YANDEX-----------------------------------------

YaGames
    .init()
    .then(ysdk => {
        console.log('Yandex SDK initialized');
        window.ysdk = ysdk;
    });


const ysdk = await YaGames.init();

ysdk.features.LoadingAPI?.ready()


let player;
export let money = 0;
export let isAuthorized = false;  
ysdk.getPlayer({ scopes: false }).then(_player => {
    player = _player;

    if (player.getMode() === "lite") {
        // –ò–≥—Ä–æ–∫ –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        console.log("–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫");
        document.getElementById("player-profile").style.display = "none";
        isAuthorized = false;
    } else {
        // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        isAuthorized = true;

        // –ù–∏–∫ –∏ –∞–≤–∞—Ç–∞—Ä
        document.getElementById("player-name").textContent = player.getName();
        document.getElementById("player-avatar").src = player.getPhoto('medium');

        // –î–µ–Ω—å–≥–∏
        player.getStats(["money"]).then(stats => {
            if (!stats.money) {
                money = 100;
                player.setStats({ money }).then(updateMoneyUI);
            } else {
                money = stats.money;
                updateMoneyUI();
            }
        });
    }
}).catch(err => {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:", err);
});


export function updateMoneyUI() {
    document.getElementById("player-money").textContent = `üí∞ ${money}`;
}

export function addMoney(amount) {
    if (!isAuthorized) {
        console.log("–ò–≥—Ä–æ–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–µ–Ω—å–≥–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.");
        return;
    }
    player.incrementStats({ money: amount }).then(() => {
        return player.getStats(["money"]);
    }).then(stats => {
        money = stats.money ?? money; // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ stats –ø—É—Å—Ç–æ–π
        updateMoneyUI();
    }).catch(err => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–Ω–µ–≥:", err);
    });
}

export function spendMoney(amount) {
    if (!isAuthorized) {
        console.log("–ò–≥—Ä–æ–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–µ–Ω—å–≥–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.");
        return;
    }
    if (money >= amount) {
        player.incrementStats({ money: -amount }).then(() => {
            return player.getStats(["money"]);
        }).then(stats => {
            money = stats.money ?? money;
            updateMoneyUI();
        }).catch(err => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –¥–µ–Ω–µ–≥:", err);
        });
    } else {
        console.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!");
    }
}



// ----------------------------------END YANDEX-------------------------------------------

const sketch = (p) => {
  p.preload = () => preload(p)
  p.setup = () => {
    setup(p)
  }
  p.draw = () => {
    if (startButton.clicked) {
      document.getElementById("player-profile").style.display = "none";
      draw(p, player1Stat, player2Stat)
    }
  }
  p.mousePressed = () => {
    if (!startButton.clicked) {
    } else if (state.gameOver) {
      // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
      menuBtn.onclick = () => {
        endButtonsDiv.style.display = 'none'
        startButton.clicked = false
        if (state.winner === 1 & state.currentMode === "bot" & isAuthorized) {
          addMoney(Math.floor(state.currentBotBet * 1.5));
          state.currentBotBet = 0; // —Å–±—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
        }
        if(state.currentMode === "botvsbot"){
          if (state.winner === 1 && state.currentChoosenWinner === "bot1") {addMoney(Math.floor(state.currentFightBet * state.currentBetCoef));}
          if (state.winner === 2 && state.currentChoosenWinner === "bot2") {addMoney(Math.floor(state.currentFightBet * state.currentBetCoef));}
        }
        updateMoneyUI();
        document.getElementById('fight-title').style.display = 'none'
        document.getElementById('special1').style.display = 'none'
        document.getElementById('special2').style.display = 'none'
        document.getElementById("player-profile").style.display = "flex";
        document.getElementById('game-wrapper').style.display = 'none'

        if(state.currentMode === "botvsbot"){
            document.getElementById('debts-screen').style.display = 'flex';
            setupBotBets()
        } else {
          document.getElementById('menu-screen').style.display = 'flex'
        }
        resetState()
        ysdk.features.GameplayAPI.stop()
      }
    }
  }
  pInstance = p
}
new p5(sketch)



function makeCharButtons(container, playerNum) {
  characters.forEach((c) => {
    const btn = document.createElement('button')
    btn.textContent = c
    btn.classList.add('char-btn')
    btn.onclick = () => {
      if (playerNum === 1) selectedPlayer1 = c
      else selectedPlayer2 = c
      ;[...container.children].forEach((b) => b.classList.remove('selected'))
      btn.classList.add('selected')
    }
    container.appendChild(btn)
  })
}
makeCharButtons(document.getElementById('char-buttons-p1'), 1)
makeCharButtons(document.getElementById('char-buttons-p2'), 2)


let startButton = {
  clicked: false,
}
document.getElementById('start-btn').onclick = () => {
  if(document.getElementById('char-panel-p2').style.display == 'none'){
    state.currentMode = "bot";
    selectedPlayer2 = characters[Math.floor(Math.random() * characters.length)];
    if (isAuthorized) {
      const bet = parseInt(botBetInput.value, 10);
      if (bet > money) {
        alert("–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!");
        return;
      }

    state.currentBotBet = bet; // –∑–∞–ø–æ–º–Ω–∏–º —Å—Ç–∞–≤–∫—É –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
    spendMoney(state.currentBotBet); 
    }
  } else {
    state.currentBotBet = 0; 
    state.currentMode = "";
  }
  console.log(state.currentMode);
  document.getElementById('menu-screen').style.display = 'none'
  document.getElementById('game-wrapper').style.display = 'block'
  setPlayers(selectedPlayer1, selectedPlayer2)
  initPlayers(pInstance)
  startButton.clicked = true
  const title = document.getElementById('fight-title')
  title.style.display = 'flex'
  const spec1 = document.getElementById('special1')
  spec1.style.display = 'inline-block'
  const spec2 = document.getElementById('special2')
  spec2.style.display = 'inline-block'
}


let endButtons = {
  menu: { x: 100, y: 500, w: 180, h: 60, text: 'Menu' },
  retry: { x: 320, y: 500, w: 180, h: 60, text: 'Retry' },
}
export function showEndButtons() {
  endButtonsDiv.style.display = 'block'
}
export function drawEndButtons(p) {
  drawButton(p, endButtons.menu)
  drawButton(p, endButtons.retry)
}
function drawButton(p, btn) {
  p.fill(214, 178, 93)
  p.stroke(194, 148, 93)
  p.strokeWeight(3)
  p.rect(btn.x, btn.y, btn.w, btn.h, 20)

  p.textFont('Delicious Handrawn')
  p.textSize(32)
  p.textAlign(p.CENTER, p.CENTER)
  p.fill(250, 250, 50)
  p.noStroke()
  p.text(btn.text, btn.x + btn.w / 2, btn.y + btn.h / 2)

  if (
    p.mouseX > btn.x &&
    p.mouseX < btn.x + btn.w &&
    p.mouseY > btn.y &&
    p.mouseY < btn.y + btn.h
  ) {
    p.noFill()
    p.stroke(255, 255, 0)
    p.strokeWeight(4)
    p.rect(btn.x, btn.y, btn.w, btn.h, 20)
  }
}



// ---------------------------VS FRIEND-------------------------------------------


const mainMenu = document.getElementById('main-menu')
const menuScreen = document.getElementById('menu-screen')

const vsFriendBtn = document.getElementById('vs-friend-btn')

// --- –ö–ù–û–ü–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
vsFriendBtn.onclick = () => {              
  mainMenu.style.display = 'none'
  menuScreen.style.display = 'flex'
}

const backBtn = document.getElementById('back-btn')
// –ù–∞–∑–∞–¥ –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
backBtn.onclick = () => {
  menuScreen.style.display = 'none'
  mainMenu.style.display = 'flex'
  botBetBlock.style.display = "none";
  state.currentBotBet = 0; // —Å–±—Ä–æ—Å
  state.currentMode = "";
  // –≤–µ—Ä–Ω—É—Ç—å –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–µ—Å—Ç–æ (–µ—Å–ª–∏ –±—ã–ª —Å–∫—Ä—ã—Ç –ø—Ä–∏ VS Bot)
  const p2Panel = document.getElementById('char-panel-p2')
  if (p2Panel) p2Panel.style.display = 'flex'
}



// ---------------------------VS BOT-------------------------------------------


const vsBotBtn = document.getElementById('vs-bot-btn')


vsBotBtn.onclick = () => {
mainMenu.style.display = 'none';
menuScreen.style.display = 'flex';
document.getElementById('char-panel-p2').style.display = 'none';
enableBotBetting();
};

const botBetBlock = document.getElementById("bot-bet-block");
const botBetInput = document.getElementById("bot-bet-amount");

botBetInput.addEventListener("input", () => {
  // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
  botBetInput.value = botBetInput.value.replace(/\D/g, "");
});

const botBetError = document.getElementById("bot-bet-error");

function enableBotBetting() {
    if (isAuthorized) {
        botBetBlock.style.display = "block";
        botBetInput.max = money; // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
        botBetInput.addEventListener("input", () => {
            const val = parseInt(botBetInput.value, 10);
            if (val > money) {
                botBetError.style.display = "block";
                botBetError.textContent = "–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!";
            } else {
                botBetError.style.display = "none";
            }
        });
    } else {
        botBetBlock.style.display = "none";
    }
}



// ---------------------------BOT VS BOT-------------------------------------------


const debtsBtn = document.getElementById('debts-btn')

const debtsBackBtn = document.getElementById('debts-back-btn') // –µ—Å–ª–∏ –µ—Å—Ç—å Debts —ç–∫—Ä–∞–Ω
// –ù–∞–∑–∞–¥ –∏–∑ Debts
if (debtsBackBtn) {
  debtsBackBtn.onclick = () => {
    document.getElementById('debts-screen').style.display = 'none'
    mainMenu.style.display = 'flex'
  }
}

// --- –≠–ö–†–ê–ù –°–¢–ê–í–û–ö –ù–ê –ë–û–¢–û–í ---

const debtCharacters = [
  'Thief', 'Knight', 'Mage', 'Archer', 'Spearman',
  'Samurai', 'Viking', 'Shielder', 'Fighter', 'Ninja', 'Piper'
];

const betsList = document.getElementById('bets-list');
const debtBetInput = document.getElementById("bet-amount");

// —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–æ—Ç–æ–≤ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
let bot1NameEl, bot2NameEl, bot1CoefEl, bot2CoefEl;

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function getRandomChar() {
  return debtCharacters[Math.floor(Math.random() * debtCharacters.length)];
}

function setupBotBets() {
  betsList.innerHTML = ''; // –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –±–æ—Ç—ã

  let bot1 = getRandomChar();
  let bot2 = getRandomChar();
  if (bot1 === bot2) {
    bot2 = getRandomChar();
  }

  let coef1 = (1 + Math.random() * 2).toFixed(2);
  let coef2 = (1 + Math.random() * 2).toFixed(2);

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–∑–∂–µ
  state.currentBot1 = bot1;
  state.currentBot2 = bot2;
  state.currentCoef1 = parseFloat(coef1);
  state.currentCoef2 = parseFloat(coef2);

  // --- –õ–µ–≤—ã–π –±–ª–æ–∫ –∏–≥—Ä–æ–∫–∞ ---
  const leftDiv = document.createElement('div');
  leftDiv.style.display = 'flex';
  leftDiv.style.flexDirection = 'column';
  leftDiv.style.alignItems = 'center';
  leftDiv.style.flex = '1';
  leftDiv.style.background = 'rgba(0, 0, 0, 0.15)';
  leftDiv.style.padding = '2vh 2vw';
  leftDiv.style.border = '0.3vw solid #d4b25d'
  leftDiv.style.borderRadius = '10px';
  leftDiv.style.marginRight = '5vw';
  leftDiv.style.backdropFilter = 'blur(1vw)';   // üîπ –¥–æ–±–∞–≤–∏–ª blur
  leftDiv.style.webkitBackdropFilter = 'blur(1vw)'; // –¥–ª—è Safari

  bot1NameEl = document.createElement('p');
  bot1NameEl.textContent = bot1;
  bot1NameEl.style.color = 'rgb(73, 143, 247)';
  bot1NameEl.style.fontFamily = "'Delicious Handrawn', cursive";
  bot1NameEl.style.fontSize = '3vw';
  bot1CoefEl = document.createElement('p');
  bot1CoefEl.textContent = `x${coef1}`;
  bot1CoefEl.style.color = 'rgb(250, 250, 50)';
  bot1CoefEl.style.fontFamily = "'Delicious Handrawn', cursive";
  bot1CoefEl.style.fontSize = '1.8vw';
  bot1CoefEl.style.marginTop = '-2vh';
  leftDiv.appendChild(bot1NameEl);
  leftDiv.appendChild(bot1CoefEl);

  // --- –ü—Ä–∞–≤—ã–π –±–ª–æ–∫ –∏–≥—Ä–æ–∫–∞ ---
  const rightDiv = document.createElement('div');
  rightDiv.style.display = 'flex';
  rightDiv.style.flexDirection = 'column';
  rightDiv.style.alignItems = 'center';
  rightDiv.style.flex = '1';
  rightDiv.style.background = 'rgba(0, 0, 0, 0.15)';
  rightDiv.style.padding = '2vh 2vw';
  rightDiv.style.border = '0.3vw solid #d4b25d'
  rightDiv.style.borderRadius = '10px';
  rightDiv.style.marginLeft = '5vw';
  rightDiv.style.backdropFilter = 'blur(1vw)';
  rightDiv.style.webkitBackdropFilter = 'blur(1vw)';

  bot2NameEl = document.createElement('p');
  bot2NameEl.textContent = bot2;
  bot2NameEl.style.color = 'rgb(245, 64, 47)';
  bot2NameEl.style.fontFamily = "'Delicious Handrawn', cursive";
  bot2NameEl.style.fontSize = '3vw';
  bot2CoefEl = document.createElement('p');
  bot2CoefEl.textContent = `x${coef2}`;
  bot2CoefEl.style.color = 'rgb(250, 250, 50)';
  bot2CoefEl.style.fontFamily = "'Delicious Handrawn', cursive";
  bot2CoefEl.style.fontSize = '1.8vw';
  bot2CoefEl.style.marginTop = '-2vh';
  rightDiv.appendChild(bot2NameEl);
  rightDiv.appendChild(bot2CoefEl);

  // --- VS ---
  const vsDiv = document.createElement('div');
  vsDiv.textContent = 'VS';
  vsDiv.style.color = 'rgb(250, 250, 50)';
  vsDiv.style.fontFamily = "'Delicious Handrawn', cursive";
  vsDiv.style.fontSize = '5vw';
  vsDiv.style.margin = '0 2vw';
  vsDiv.style.alignSelf = 'center';

  const container = document.createElement('div');
  container.style.display = 'flex';
  container.style.justifyContent = 'center';
  container.style.alignItems = 'center';
  container.style.marginBottom = '2vh';
  container.appendChild(leftDiv);
  container.appendChild(vsDiv);
  container.appendChild(rightDiv);

  betsList.appendChild(container);
}

// --- –∫–Ω–æ–ø–∫–∞ "Place Bet" ---
document.getElementById("place-bet").addEventListener("click", () => {
  const amount = parseInt(debtBetInput.value, 10);

  if (!chosenDebtWinner) {
    alert("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–æ–≥–æ —Å—Ç–∞–≤–∏—Ç–µ!");
    return;
  }
  if (amount <= 0 || amount > money || isNaN(amount)) {
    alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏!");
    return;
  }

  state.currentMode = "botvsbot";

  spendMoney(amount);

  state.currentFightBet = amount;
  state.currentChoosenWinner = chosenDebtWinner;
  state.currentBetCoef = chosenDebtWinner === "bot1" ? state.currentCoef1 : state.currentCoef2;

  // alert(`–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${amount} –Ω–∞ ${chosenDebtWinner.toUpperCase()} —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º x${state.currentBetCoef}`);

  document.getElementById('debts-screen').style.display = 'none';
  document.getElementById('game-wrapper').style.display = 'block';

  setPlayers(state.currentBot1, state.currentBot2);
  initPlayers(pInstance);
  startButton.clicked = true;

  const title = document.getElementById('fight-title');
  title.style.display = 'flex';
  document.getElementById('special1').style.display = 'inline-block';
  document.getElementById('special2').style.display = 'inline-block';
});


// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞ –∫–æ–≥–æ —Å—Ç–∞–≤–∏—Ç—å
let chosenDebtWinner = null;
document.getElementById("bet-on-p1").addEventListener("click", () => {
  chosenDebtWinner = "bot1";
  document.getElementById("bet-on-p1").classList.add("selected");
  document.getElementById("bet-on-p2").classList.remove("selected");
});
document.getElementById("bet-on-p2").addEventListener("click", () => {
  chosenDebtWinner = "bot2";
  document.getElementById("bet-on-p2").classList.add("selected");
  document.getElementById("bet-on-p1").classList.remove("selected");
});

// –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º–µ
const debtBetError = document.createElement('div');
debtBetError.id = "debt-bet-error"; // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å
debtBetError.style.color = "red";
debtBetError.style.marginTop = "0.5vh";
debtBetError.style.display = "none";
debtBetError.style.fontSize = "2vh";

debtBetInput.insertAdjacentElement("afterend", debtBetError);


debtBetInput.addEventListener("input", () => {
  const val = parseInt(debtBetInput.value, 10);
  if (val > money) {
    debtBetError.style.display = "block";
    debtBetError.textContent = "–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!";
  } else if (val <= 0 || isNaN(val)) {
    debtBetError.style.display = "block";
    debtBetError.textContent = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!";
  } else {
    debtBetError.style.display = "none";
  }

  debtBetInput.value = debtBetInput.value.replace(/\D/g, "");
});

// –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ Debts
debtsBtn.onclick = () => {
  if (!isAuthorized) {
    alert("–ß—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å–∞!");
    return;
  }
  mainMenu.style.display = 'none';
  document.getElementById('debts-screen').style.display = 'flex';

  setupBotBets(); // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
};


// ---------------------------------------------------------------------------------